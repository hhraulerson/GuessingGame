/**
 Program that allows a user to play a guessing game by generating a random number 
 between 0 and a max value.  The user tries to guess the number with a preset number
 of tries specified.
 
 @author Hiram Raulerson
 @version 2.0
 
 E-mail Address: hhr3@students.uwf.edu.
 
 Last Changed: September 6, 2015.
 
 COP5007	Project #: 1
 File Name: GuessingGame.java
*/

import java.util.Random;

public class GuessingGame
{
   /**
   Stores a random number generated by a Random class object
   */
   private int answer;
   
   /**
   Generates random numbers between 0 and max
   */
   private Random generator;
   
   /**
   Determines whether the current game is over
   */
   private boolean gameOver;
   
   /**
   Determines whether user is warmer or colder when guessing answer based on 
   current guess and answer
   */
   private int differential;
   
   /**
   Determines upper range for random number generation (0 to max)
   */
   private int max;
   
   /**
   Determines max guesses allowed by user
   */
   private int maxGuessesAllowed;
   
   /**
   Keeps track of the how many guesses the user has made in a game
   */
   private int numGuessesTaken;

   /**
   Constructs a GuessingGame object with max equal to zero.  This constructor also
   creates a Random class object.
   */
   public GuessingGame()
   {
      setMax(0);
      generator = new Random();
   }
   
   /**
   Constructs a GuessingGame object with max equal to the parameter value.  
   This constructor also creates a Random class object.
   @param limit upper range for creating random number
   */
   public GuessingGame(int limit)
   {
      setMax(limit);
      generator = new Random();
   }

   /**
   This method sets the max number of guesses allowed to the parameter value, sets answer
   to a random value between zero and max, sets gameOver to false, sets differential 
   to zero as there is no previous guess, and sets the number of guesses by the user to zero.
   @param guessesAllowed used to set the max number of times the user can make a guess
   */
   public void newGame(int guessesAllowed)
   {
      setMaxGuesses(guessesAllowed);
      
      // add one to max to get correct range as upper limit of
      // nextInt() is excluded
      setAnswer(generator.nextInt(getMax() + 1));
      
      setGameOver(false);
      
      /* 
      set differential to max by adding max to answer 
      and passing that to setDifferential()
      (i.e., max = 400, answer = 38 -- 
      setDifferential(438) = 438 - 38 = 400)
      */
      setDifferential(getMax() + getAnswer());
      
      // sets numGuessesTaken equal to zero
      incrementGuessesTaken(false);
   }

   /**
   This method is passed the user's guess to test if it is out of range.  Next, this method 
   determines if the user has made too many guesses by comparing the max guesses allowed to 
   the number of guesses made by the user. This method also compares the user's guess to '
   the answer.  Then the method checks whether the user has guessed the answer and, if not, 
   how the current guess compares to the previous guess. In each of these comparisons, an 
   appropriate response is generated and returned.
   @param newChoice the user's guess
   @return an appropriate response based on each comparison
   */
   public String guess(int newChoice)
   {
      String response = "";
      
      // in this game user is not penalized for guessing out of range; they get a do over
      if (newChoice < 0 || newChoice > getMax())
      {
         response = "Guess is out of range. Remember the answer is between 0 and " + getMax();
      
         return response;      
      }
      else
      {
         incrementGuessesTaken(true);
         
         if (getGuessesTaken() > getMaxGuesses())
         {
            response = "You've made too many guesses.  Sorry you lose!";
            
            setGameOver(true);
            
            return response;
         }
         
         if (newChoice > getAnswer())
         {
            response = "Too high!\n";
         }
         else if (newChoice < getAnswer())
         {
            response = "Too low!\n";
         }
         else
         {
            response = "Congratulations you guessed correctly!  You win!";
         
            setGameOver(true);
            
            return response;
         }
         
         // get previous differential
         int previousDiff = getDifferential();
      
         // set new differential based on user's guess
         setDifferential(newChoice);
      
         if (previousDiff > getDifferential())
         {
            response += "You are getting warmer!";
         
            return response;
         }
         else if (previousDiff < getDifferential())
         {
            response += "You are getting colder!";
         
            return response;
         }
         else
         {
            response = "You're actually not any warmer or colder!\nYour last guess was as close to the answer as this guess!";
            return response;
         }
      }
   }
   
   /**
   Sets answer equal to the parameter value
   @param randomNumber a random number generated by a Random class object 
   */
   private void setAnswer(int randomNumber)
   {
      answer = randomNumber;
   }

   /**
   Returns the answer (the random number to guess) 
   @return the answer
   */
   private int getAnswer()
   {
      return answer;
   }

   /**
   Sets game over to the parameter value
   @param over the status of the current game
   */
   private void setGameOver(boolean over)
   {
      if (over)
      {
         gameOver = true;
      }
      else
      {
         gameOver = false;
      }
      
   }

   /**
   Returns whether the game is over
   @return the status of the current game
   */
   public boolean isGameOver()
   {
      return gameOver;
   }
   
   /**
   Sets the difference between the user's guess and the answer. If statements are 
   used to ensure that the difference is not a negative value.
   @param userGuess the user's guess
   */
   private void setDifferential(int userGuess)
   {
      if (getAnswer() > userGuess)
      {
         differential = getAnswer() - userGuess;
      }
      else if (getAnswer() < userGuess)
      {
         differential = userGuess - getAnswer();
      }
      else
      {
         //differential must be 0; game is over
         differential = 0;
      }
   }
   
   /**
   Returns the difference between the user's guess and the answer
   @return difference between the user's guess and the answer
   */
   private int getDifferential()
   {
      return differential;
   }

   /**
   Sets the upper range of the number to be guessed to the parameter value
   @param limit upper range of the number to be guessed
   */
   private void setMax(int limit)
   {
      max = limit;
   }

   /**
   Returns the number that is the upper range for the user to guess
   @return the max value that the user can guess
   */
   private int getMax()
   {
      return max;
   }
   
   /**
   Sets the max guesses allowed by the user equal to the parameter value
   @param guessesAllowed max number of guesses user can make
   */
   private void setMaxGuesses(int guessesAllowed)
   {
      maxGuessesAllowed = guessesAllowed;
   }
   
   /**
   Returns the max guesses allowed by the user
   @return max number of guesses that user can make 
   */
   private int getMaxGuesses()
   {
      return maxGuessesAllowed;
   }
   
   /**
   Either resets the number of guesses taken by the user to zero or increments the 
   number of guesses taken by the user by one depending on the parameter value  
   @param increment determines whether to add one to the number guesses the user 
   has made or to reset the number of guesses the user has taken to zero
   */
   private void incrementGuessesTaken(boolean increment)
   {
      if (increment == true)
      {
         ++numGuessesTaken;
      }
      else
      {
         numGuessesTaken = 0;
      }
   }
   
   /**
   Returns the number of guesses the user has made 
   @return number the number of guesses made by the user
   */
   private int getGuessesTaken()
   {
      return numGuessesTaken;
   }
         
}